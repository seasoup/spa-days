What we want:

FEATURE MODULE LEVEL

We should prefer to use an abstracted inteface from the model.
We want the model to drive any changes on the DOM level, yet the model
itself should not be tied to any DOM elements.

Our model exports a people object and a chat object.  These are
used by the feature modules to inform the model of changes, for example:

  spa.model.people.login( <user_name> );
  spa.model.chat.join();
  spa.model.chat.set_chatee( <chatee.id> );
  spa.model.chat.send_msg( ... );
  // .. later
  spa.model.people.logout();

Our data is bound using jQuery global events.  All our events
are namespaced with an 'spa-' prefix.

  jqueryMap.$list_box.bind( 'spa-listchange', onListchange );
  jqueryMap.$chat_box.bind( 'spa-updatechat', onUpdatechat );


NOTES FOR MODEL

We originally implemented a callback stack to distribute event data to feature
modules.  The benefit was we remained completely independent of the DOM and
jQuery.  The downside was callbacks that were registered weren't tied to the DOM.
Thus either callbacks had to be smart enough not to fire if their container
was not on screen, or they had to be manually disassociated.  Ugh.

So we went back to jQuery global events.  These have greatly improved in
performance over the last few years
(See http://stackoverflow.com/questions/3162748).

The downside is the model now does require jQuery, and testing is more
difficult.  We may bring back the callback stack for testing purposes.

An 'updatechat' message provides information to update the chat window.

When user types in a message and presses return, we get a 'submit' event and
we can send the message with spa.model.chat.send_msg(...);

