What we want:

FEATURE MODULE LEVEL

We should prefer to use an abstracted inteface from the model,
with perhaps the model maintaining and coordinating any global chat
artifacts. A key aspect of the implementation should be that data and model
layers should always be independent from the DOM.  Therefore, we want
to use callbacks:

  spa.model.people.make_user( <user_name> );
  spa.model.chat.join();
  spa.model.chat.set_chatee( <chatee.id> );

  // set callbacks for various events
  spa.model.callBack.add( 'listchange', listChangeCb );
  spa.model.callBack.add( 'chat',       chatCb );
  spa.model.callBack.add( 'updatechat', updateChatCb );

  // ... later ...

  spa.model.chat.send_msg( ... );

NOTES FOR MODEL

Global event have greatly improved over the last year in performance.  See
http://stackoverflow.com/questions/3162748. However, we have instead implemented
callbacks to remain independent of the DOM.  The downside of the callbacks is
they don't magically "disappear" when a DOM element is removed.

An 'updatechat' message provides information to update the chat window.

When user types in a message and presses return, we get a 'submit' event and
we can send the message with spa.model.chat.send_msg(...);

NOTES 2012-09-30 per Josh:

user comes to page:
 - gets name
 - client.emit( 'adduser', name );

client emits 'listchange' to all connected clients
  package: list of users in response_list[0][n].name

User inputs a message.
client emits a 'chat' with this argument:
 { user : name, message : msg_text, chatee : chatee.name };

Server receives chat and looks up the chatter list
server emits 'updatechat' to chatee only with originating username and
message.

If chatee is offline, Server emits back to originating client an 'updatechat'
event with 'spa' as username, and message indicates it target chattee is
offline.

When client is closed, should emit a 'leavechat' event.  Server removes user
and then emits a 'listchange' to all connected clients.
package: list of users in response_list[0][n].name


